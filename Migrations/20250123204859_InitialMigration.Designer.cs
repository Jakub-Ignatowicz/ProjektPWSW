// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Projekt.Models;

#nullable disable

namespace ProjektPWSW.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250123204859_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Projekt.Models.ActivityType", b =>
                {
                    b.Property<int>("ActivityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ActivityID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ActivityID");

                    b.ToTable("ActivityTypes");
                });

            modelBuilder.Entity("Projekt.Models.Tracker", b =>
                {
                    b.Property<int>("TrackerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TrackerID"));

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Progress")
                        .HasColumnType("real");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("TargetValue")
                        .HasColumnType("real");

                    b.Property<string>("TrackerType")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("TrackerID");

                    b.HasIndex("UserID");

                    b.ToTable("Trackers");

                    b.HasDiscriminator<string>("TrackerType").HasValue("Tracker");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Projekt.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserID"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserID");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Projekt.Models.PhisicalActivityTracker", b =>
                {
                    b.HasBaseType("Projekt.Models.Tracker");

                    b.Property<int>("ActivityTypeId")
                        .HasColumnType("integer");

                    b.HasIndex("ActivityTypeId");

                    b.HasDiscriminator().HasValue("PhisicalActivityTracker");
                });

            modelBuilder.Entity("Projekt.Models.SleepTracker", b =>
                {
                    b.HasBaseType("Projekt.Models.Tracker");

                    b.HasDiscriminator().HasValue("SleepTracker");
                });

            modelBuilder.Entity("Projekt.Models.WaterIntakeTracker", b =>
                {
                    b.HasBaseType("Projekt.Models.Tracker");

                    b.HasDiscriminator().HasValue("WaterIntakeTracker");
                });

            modelBuilder.Entity("Projekt.Models.Tracker", b =>
                {
                    b.HasOne("Projekt.Models.User", "User")
                        .WithMany("Trackers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Projekt.Models.PhisicalActivityTracker", b =>
                {
                    b.HasOne("Projekt.Models.ActivityType", "ActivityType")
                        .WithMany("PhysicalActivities")
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityType");
                });

            modelBuilder.Entity("Projekt.Models.ActivityType", b =>
                {
                    b.Navigation("PhysicalActivities");
                });

            modelBuilder.Entity("Projekt.Models.User", b =>
                {
                    b.Navigation("Trackers");
                });
#pragma warning restore 612, 618
        }
    }
}
